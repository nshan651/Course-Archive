<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="arch" name="nanol.TestParser" tests="9" errors="0" failures="0" skipped="0" time="0.072" timestamp="2022-11-20T23:04:39">
          <properties>
      <property name="java.specification.version" value="19"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="sun.arch.data.model" value="64"/><property name="java.vendor.url" value="https://openjdk.java.net/"/><property name="sun.boot.library.path" value="/usr/lib/jvm/java-19-openjdk/lib"/><property name="sun.java.command" value="/usr/share/sbt/bin/sbt-launch.jar test"/><property name="jdk.debug" value="release"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="java.version.date" value="2022-10-18"/><property name="java.home" value="/usr/lib/jvm/java-19-openjdk"/><property name="file.separator" value="/"/><property name="java.vm.compressedOopsMode" value="32-bit"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="java.runtime.version" value="19.0.1+10"/><property name="user.name" value="nick"/><property name="log4j.ignoreTCL" value="true"/><property name="file.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/home/nick/.cache/JNA/temp/jna16254345201061176219.tmp"/><property name="jna.loaded" value="true"/><property name="java.io.tmpdir" value="/tmp"/><property name="java.version" value="19.0.1"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="native.encoding" value="UTF-8"/><property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/><property name="stderr.encoding" value="UTF-8"/><property name="java.vendor" value="N/A"/><property name="scala.ext.dirs" value="/home/nick/.sbt/1.0/java9-rt-ext-n_a_19_0_1"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="java.class.path" value="/usr/share/sbt/bin/sbt-launch.jar"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="jline.shutdownhook" value="false"/><property name="user.timezone" value="America/Chicago"/><property name="java.vm.specification.version" value="19"/><property name="os.name" value="Linux"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="user.country" value="US"/><property name="sun.cpu.endian" value="little"/><property name="user.home" value="/home/nick"/><property name="user.language" value="en"/><property name="sbt.script" value="/usr/bin/sbt"/><property name="sbt.ipcsocket.tmpdir" value="/run/user/1000/.sbtaa4d54eb/ipcsocket"/><property name="swoval.tmpdir" value="/run/user/1000/.sbtaa4d54eb/swoval"/><property name="jline.esc.timeout" value="0"/><property name="stdout.encoding" value="UTF-8"/><property name="path.separator" value=":"/><property name="os.version" value="6.0.8-arch1-1"/><property name="jna.nosys" value="true"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/><property name="jna.platform.library.path" value="/usr/lib64:/lib64:/usr/lib:/lib:/usr/lib32:/usr/lib/libfakeroot"/><property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/><property name="user.dir" value="/home/nick/git/Course-Archive/comp371/test-2-programming-portion-nshan651"/><property name="os.arch" value="amd64"/><property name="java.vm.info" value="mixed mode"/><property name="java.vm.version" value="19.0.1+10"/><property name="java.class.version" value="63.0"/>
    </properties>
          <testcase classname="nanol.TestParser" name="parser works for (hello (world what ()) (up))" time="0.059">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for (hello world what up)" time="0.002">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for (hello)" time="0.001">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for the empty string" time="0.002">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for ( ( ( ) ) ( ) )" time="0.002">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for (&quot;hello&quot; &quot;world&quot; &quot;what&quot; &quot;up&quot;)" time="0.002">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for ( ( ) ) ( ) )" time="0.002">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for hello" time="0.001">
                      
                    </testcase><testcase classname="nanol.TestParser" name="parser works for ( ( hello world ) ( what up ) )" time="0.001">
                      
                    </testcase>
          <system-out><![CDATA[]]></system-out>
          <system-err><![CDATA[]]></system-err>
        </testsuite>